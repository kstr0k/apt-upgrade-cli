#!/bin/bash
set -eu

# License = MIT
# Author = https://gitlab.com/almr/
# Homepage = https://gitlab.com/almr/apt-upgrade-cli/

# https://unix.stackexchange.com/questions/603514/apt-upgrade-package-without-marking-as-manually-installed

# TODO: apt options

usage () {
  printf '%s\n' 'Args: [-u|--update] [--all] [--editor|-e] [pkg ...]'
  exit 0
}
parse_args () {
DEFSTATUS=off
BACKEND=dialog
OREC=--no-install-recommends
UPGPCRE='^([^/]+)/.*\bupgradable '  # apt isn't scriptable by its own confession; format: linux-doc/focal-updates 5.4.0-59.65 all [upgradable from: 5.4.0-58.64]
while test $# -gt 0; do
  local arg=$1; shift
  case "$arg" in
    --) break ;;
    -h|--help) usage; exit 0 ;;
    -v|--verbose) set -x ;;
    --all|-a) DEFSTATUS=on ;;
    --update|-u) apt update ;;
    --editor|-e) BACKEND=edit ;;
    --rec|--with-install-recommends) OREC= ;;
    -*) echo "Unknown: $arg"; exit 1 ;;
    *) set -- "$arg" "$@"; break ;;
  esac
done
ARGV=( "$@" )
}

upgable2pkgs () {
  perl -wlnE 'print $1 if m@'"$UPGPCRE"'@'
}

dialog_sel_pkgs () (
  US=$(upgable2pkgs)
  test -z "$US" && exit 0
  for u in $US; do set -- "$@" "$u" '' "$DEFSTATUS"; done
  # 2>&1 to captured stdout (dialog defaults to --stderr); then restore tty stdin/out
  # simpler to use --stdout so dialog reopens the tty (but docs warn against)
  dialog --separate-output --checklist 'Upgrade' 0 0 0 "$@" 2>&1 0<&5 1>&6
)

__set_editor_env () {  # set $EDITOR to app-preferred, or existing $EDITOR, or detected
  EDITOR=${APTUP_EDITOR:-${EDITOR:-$(which sensible-editor || which nano || which editor || which vim || which vi)}}
}
edit_sel_pkgs () (
  USF=$(mktemp)
  trap 'rm -f "$USF"' EXIT  # bashism
  if test 'off' = "$DEFSTATUS"; then pfx='#'; else pfx=' '; fi
  sed -e "s/^/$pfx/" >"$USF"
  test -s "$USF" || exit 0
  __set_editor_env; $EDITOR "$USF" 0<&5 1>&6  # though we're on Debian for sure
  grep -v '^#' "$USF" | upgable2pkgs
)

sel_pkgs () {
  apt list --upgradeable "$@" 2>/dev/null | grep -P "$UPGPCRE" |
    ${BACKEND}_sel_pkgs
}

exec 5<&0 6>&1

parse_args "$@"; set -- "${ARGV[@]}"
set -- $(sel_pkgs "$@")
test $# -eq 0 && { echo 'No upgrades available' 1>&2; exit; }

AUTOS=$(apt-mark showauto "$@")
clear
(set -x; apt install $OREC "$@")
test -n "$AUTOS" && apt-mark auto $AUTOS >/dev/null
